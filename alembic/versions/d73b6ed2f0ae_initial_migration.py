"""Initial migration

Revision ID: d73b6ed2f0ae
Revises: 
Create Date: 2025-02-19 20:05:19.461122

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes

# revision identifiers, used by Alembic.
revision: str = 'd73b6ed2f0ae'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('community',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('level', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('area', sa.Float(), nullable=True),
    sa.Column('population', sa.Integer(), nullable=True),
    sa.Column('flag', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['community.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_community_name'), 'community', ['name'], unique=False)
    op.create_table('continent',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_continent_name'), 'continent', ['name'], unique=True)
    op.create_table('tag',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tag_name'), 'tag', ['name'], unique=True)
    op.create_table('users',
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('emailVerified', sa.DateTime(), nullable=True),
    sa.Column('image', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('role', sa.Enum('ADMIN', 'USER', 'GUEST', 'MODERATOR', 'BOT', name='userrole'), nullable=True),
    sa.Column('bio', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('location', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('website', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('cover', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('gender', sqlmodel.sql.sqltypes.AutoString(length=1), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('verification_token',
    sa.Column('identified', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('token', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('expires', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('identified', 'token')
    )
    op.create_table('accounts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('userId', sa.Integer(), nullable=False),
    sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('provider', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('providerAccountId', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('refresh_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('access_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('expires_at', sa.Integer(), nullable=True),
    sa.Column('token_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('scope', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('session_state', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('country',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('area', sa.Float(), nullable=True),
    sa.Column('borders', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('capital_latlng', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('capital', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('cca2', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('cca3', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('coat_of_arms_svg', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('currency_code', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('currency_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('flag', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('google_maps_link', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('idd_root', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('idd_suffixes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('landlocked', sa.Boolean(), nullable=True),
    sa.Column('languages', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('native_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('numeric_code', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('openstreetmap_link', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('population', sa.Integer(), nullable=True),
    sa.Column('region', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('subregion', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('timezone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('continent_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['continent_id'], ['continent.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_country_name'), 'country', ['name'], unique=True)
    op.create_table('poll',
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('type', sa.Enum('BINARY', 'SINGLE_CHOICE', 'MULTIPLE_CHOICE', name='polltype'), nullable=False),
    sa.Column('is_anonymous', sa.Boolean(), nullable=False),
    sa.Column('ends_at', sa.DateTime(), nullable=True),
    sa.Column('scope', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('creator_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'CLOSED', 'PUBLISHED', name='pollstatus'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_poll_slug'), 'poll', ['slug'], unique=True)
    op.create_index(op.f('ix_poll_title'), 'poll', ['title'], unique=False)
    op.create_table('sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('userId', sa.Integer(), nullable=False),
    sa.Column('expires', sa.DateTime(), nullable=False),
    sa.Column('sessionToken', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('usercommunitylink',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('community_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['community_id'], ['community.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'community_id')
    )
    op.create_table('userfollowlink',
    sa.Column('follower_id', sa.Integer(), nullable=False),
    sa.Column('followed_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['followed_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['follower_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('follower_id', 'followed_id')
    )
    op.create_table('pollcomment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('poll_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['poll_id'], ['poll.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pollcommunitylink',
    sa.Column('poll_id', sa.Integer(), nullable=False),
    sa.Column('community_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['community_id'], ['community.id'], ),
    sa.ForeignKeyConstraint(['poll_id'], ['poll.id'], ),
    sa.PrimaryKeyConstraint('poll_id', 'community_id')
    )
    op.create_table('polloption',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('poll_id', sa.Integer(), nullable=False),
    sa.Column('text', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=False),
    sa.Column('votes', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['poll_id'], ['poll.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pollreaction',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('poll_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('reaction', sa.Enum('LIKE', 'DISLIKE', name='reactiontype'), nullable=False),
    sa.Column('reacted_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['poll_id'], ['poll.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('polltaglink',
    sa.Column('poll_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['poll_id'], ['poll.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], ),
    sa.PrimaryKeyConstraint('poll_id', 'tag_id')
    )
    op.create_table('subnation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('area', sa.Float(), nullable=True),
    sa.Column('population', sa.Integer(), nullable=True),
    sa.Column('borders', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('capital', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('flag', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('iso_code', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('timezone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('famous_landmark', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('country_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['country_id'], ['country.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pollvote',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('poll_id', sa.Integer(), nullable=False),
    sa.Column('option_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['option_id'], ['polloption.id'], ),
    sa.ForeignKeyConstraint(['poll_id'], ['poll.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('subnationdivision',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('area', sa.Float(), nullable=True),
    sa.Column('population', sa.Integer(), nullable=True),
    sa.Column('borders', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('subnation_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['subnation_id'], ['subnation.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_subnationdivision_name'), 'subnationdivision', ['name'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_subnationdivision_name'), table_name='subnationdivision')
    op.drop_table('subnationdivision')
    op.drop_table('pollvote')
    op.drop_table('subnation')
    op.drop_table('polltaglink')
    op.drop_table('pollreaction')
    op.drop_table('polloption')
    op.drop_table('pollcommunitylink')
    op.drop_table('pollcomment')
    op.drop_table('userfollowlink')
    op.drop_table('usercommunitylink')
    op.drop_table('sessions')
    op.drop_index(op.f('ix_poll_title'), table_name='poll')
    op.drop_index(op.f('ix_poll_slug'), table_name='poll')
    op.drop_table('poll')
    op.drop_index(op.f('ix_country_name'), table_name='country')
    op.drop_table('country')
    op.drop_table('accounts')
    op.drop_table('verification_token')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_tag_name'), table_name='tag')
    op.drop_table('tag')
    op.drop_index(op.f('ix_continent_name'), table_name='continent')
    op.drop_table('continent')
    op.drop_index(op.f('ix_community_name'), table_name='community')
    op.drop_table('community')
    # ### end Alembic commands ###
