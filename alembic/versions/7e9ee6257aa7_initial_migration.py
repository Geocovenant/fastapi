"""Initial migration

Revision ID: 7e9ee6257aa7
Revises: 
Create Date: 2025-03-02 03:53:44.345484

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes

# revision identifiers, used by Alembic.
revision: str = '7e9ee6257aa7'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('community',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('level', sa.Enum('GLOBAL', 'INTERNATIONAL', 'CONTINENT', 'NATIONAL', 'REGIONAL', 'LOCAL', 'CUSTOM', name='communitylevel'), nullable=False),
    sa.Column('geo_data', sa.JSON(), nullable=True),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['parent_id'], ['community.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('issuecategory',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_issuecategory_name'), 'issuecategory', ['name'], unique=False)
    op.create_table('tag',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tag_name'), 'tag', ['name'], unique=True)
    op.create_table('users',
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('emailVerified', sa.DateTime(), nullable=True),
    sa.Column('image', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('role', sa.Enum('ADMIN', 'USER', 'GUEST', 'MODERATOR', 'BOT', name='userrole'), nullable=True),
    sa.Column('bio', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('country', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('website', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('cover', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('gender', sqlmodel.sql.sqltypes.AutoString(length=1), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('verification_token',
    sa.Column('identified', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('token', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('expires', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('identified', 'token')
    )
    op.create_table('accounts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('userId', sa.Integer(), nullable=False),
    sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('provider', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('providerAccountId', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('refresh_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('access_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('expires_at', sa.Integer(), nullable=True),
    sa.Column('token_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('scope', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('session_state', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('continent',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('community_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['community_id'], ['community.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_continent_name'), 'continent', ['name'], unique=True)
    op.create_table('debate',
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=10000), nullable=True),
    sa.Column('views_count', sa.BigInteger(), nullable=True),
    sa.Column('images', sa.JSON(), nullable=True),
    sa.Column('language', sa.Enum('EN', 'ES', 'FR', name='languagecode'), nullable=False),
    sa.Column('public', sa.Boolean(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sa.Enum('OPEN', 'PENDING', 'CLOSED', 'REJECTED', 'ARCHIVED', 'RESOLVED', name='debatestatus'), nullable=False),
    sa.Column('type', sa.Enum('GLOBAL', 'INTERNATIONAL', 'NATIONAL', 'REGIONAL', 'SUBREGIONAL', 'LOCAL', name='debatetype'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('creator_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('approved_by_id', sa.Integer(), nullable=True),
    sa.Column('rejected_by_id', sa.Integer(), nullable=True),
    sa.Column('approved_at', sa.DateTime(), nullable=True),
    sa.Column('rejected_at', sa.DateTime(), nullable=True),
    sa.Column('moderation_notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['approved_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['rejected_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_debate_created_at'), 'debate', ['created_at'], unique=False)
    op.create_index(op.f('ix_debate_slug'), 'debate', ['slug'], unique=True)
    op.create_index(op.f('ix_debate_title'), 'debate', ['title'], unique=False)
    op.create_table('poll',
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=5000), nullable=True),
    sa.Column('type', sa.Enum('BINARY', 'SINGLE_CHOICE', 'MULTIPLE_CHOICE', 'OPEN_CHOICE', 'RANKING', 'SCALE', name='polltype'), nullable=False),
    sa.Column('is_anonymous', sa.Boolean(), nullable=False),
    sa.Column('ends_at', sa.DateTime(), nullable=True),
    sa.Column('scope', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('creator_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'CLOSED', 'PUBLISHED', name='pollstatus'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('views_count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_poll_slug'), 'poll', ['slug'], unique=True)
    op.create_index(op.f('ix_poll_title'), 'poll', ['title'], unique=False)
    op.create_table('project',
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=5000), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'OPEN', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', name='projectstatus'), nullable=False),
    sa.Column('goal_amount', sa.Float(), nullable=True),
    sa.Column('current_amount', sa.Float(), nullable=False),
    sa.Column('scope', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('creator_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('views_count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_project_slug'), 'project', ['slug'], unique=True)
    op.create_index(op.f('ix_project_title'), 'project', ['title'], unique=False)
    op.create_table('sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('userId', sa.Integer(), nullable=False),
    sa.Column('expires', sa.DateTime(), nullable=False),
    sa.Column('sessionToken', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('usercommunitylink',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('community_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['community_id'], ['community.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'community_id')
    )
    op.create_table('userfollowlink',
    sa.Column('follower_id', sa.Integer(), nullable=False),
    sa.Column('followed_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['followed_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['follower_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('follower_id', 'followed_id')
    )
    op.create_table('country',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('area', sa.Float(), nullable=True),
    sa.Column('borders', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('capital_latlng', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('capital', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('cca2', sqlmodel.sql.sqltypes.AutoString(length=2), nullable=False),
    sa.Column('cca3', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('coat_of_arms_svg', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('currency_code', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('currency_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('flag', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('google_maps_link', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('idd_root', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('idd_suffixes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('landlocked', sa.Boolean(), nullable=True),
    sa.Column('languages', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('native_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('numeric_code', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('openstreetmap_link', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('population', sa.Integer(), nullable=True),
    sa.Column('region', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('subregion', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('timezone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('administrative_division_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('community_id', sa.Integer(), nullable=False),
    sa.Column('continent_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['community_id'], ['community.id'], ),
    sa.ForeignKeyConstraint(['continent_id'], ['continent.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_country_name'), 'country', ['name'], unique=True)
    op.create_table('debatechangelog',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('debate_id', sa.Integer(), nullable=False),
    sa.Column('changed_by_id', sa.Integer(), nullable=False),
    sa.Column('changed_at', sa.DateTime(), nullable=False),
    sa.Column('field_changed', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('old_value', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('new_value', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('reason', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['changed_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['debate_id'], ['debate.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('debatecommunitylink',
    sa.Column('debate_id', sa.Integer(), nullable=False),
    sa.Column('community_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['community_id'], ['community.id'], ),
    sa.ForeignKeyConstraint(['debate_id'], ['debate.id'], ),
    sa.PrimaryKeyConstraint('debate_id', 'community_id')
    )
    op.create_table('debatetaglink',
    sa.Column('debate_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['debate_id'], ['debate.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], ),
    sa.PrimaryKeyConstraint('debate_id', 'tag_id')
    )
    op.create_table('pointofview',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('debate_id', sa.Integer(), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('community_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['community_id'], ['community.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['debate_id'], ['debate.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pollcomment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('poll_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['poll_id'], ['poll.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pollcommunitylink',
    sa.Column('poll_id', sa.Integer(), nullable=False),
    sa.Column('community_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['community_id'], ['community.id'], ),
    sa.ForeignKeyConstraint(['poll_id'], ['poll.id'], ),
    sa.PrimaryKeyConstraint('poll_id', 'community_id')
    )
    op.create_table('polloption',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('poll_id', sa.Integer(), nullable=False),
    sa.Column('text', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=False),
    sa.Column('votes', sa.Integer(), nullable=False),
    sa.Column('is_custom_option', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['poll_id'], ['poll.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pollreaction',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('poll_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('reaction', sa.Enum('LIKE', 'DISLIKE', name='reactiontype'), nullable=False),
    sa.Column('reacted_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['poll_id'], ['poll.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('polltaglink',
    sa.Column('poll_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['poll_id'], ['poll.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], ),
    sa.PrimaryKeyConstraint('poll_id', 'tag_id')
    )
    op.create_table('projectcommitment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.Enum('TIME', 'MATERIAL', 'ECONOMIC', name='commitmenttype'), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('quantity', sa.Float(), nullable=True),
    sa.Column('unit', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('fulfilled', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('projectcommunitylink',
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('community_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['community_id'], ['community.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('project_id', 'community_id')
    )
    op.create_table('projectdonation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('donated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('projectstep',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('order', sa.Integer(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('opinion',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('point_of_view_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['point_of_view_id'], ['pointofview.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pollcustomresponse',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('option_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('response_text', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['option_id'], ['polloption.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pollvote',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('poll_id', sa.Integer(), nullable=False),
    sa.Column('option_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['option_id'], ['polloption.id'], ),
    sa.ForeignKeyConstraint(['poll_id'], ['poll.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('projectresource',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('step_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.Enum('LABOR', 'MATERIAL', 'ECONOMIC', name='resourcetype'), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('quantity', sa.Float(), nullable=True),
    sa.Column('unit', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.ForeignKeyConstraint(['step_id'], ['projectstep.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('region',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('area', sa.Float(), nullable=True),
    sa.Column('population', sa.Integer(), nullable=True),
    sa.Column('borders', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('capital', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('flag', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('iso_code', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('timezone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('famous_landmark', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('country_cca2', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('community_id', sa.Integer(), nullable=False),
    sa.Column('country_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['community_id'], ['community.id'], ),
    sa.ForeignKeyConstraint(['country_id'], ['country.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('opinionvote',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('opinion_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['opinion_id'], ['opinion.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('subregion',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('area', sa.Float(), nullable=True),
    sa.Column('population', sa.Integer(), nullable=True),
    sa.Column('borders', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('capital', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('website', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('head_of_government', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('head_of_government_title', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('community_id', sa.Integer(), nullable=False),
    sa.Column('region_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['community_id'], ['community.id'], ),
    sa.ForeignKeyConstraint(['region_id'], ['region.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_subregion_name'), 'subregion', ['name'], unique=True)
    op.create_table('locality',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('area', sa.Float(), nullable=True),
    sa.Column('population', sa.Integer(), nullable=True),
    sa.Column('borders', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('capital', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('website', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('head_of_government', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('head_of_government_title', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('community_id', sa.Integer(), nullable=False),
    sa.Column('subregion_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['community_id'], ['community.id'], ),
    sa.ForeignKeyConstraint(['subregion_id'], ['subregion.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_locality_name'), 'locality', ['name'], unique=True)
    op.create_table('institution',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('level', sa.Enum('MUNICIPAL', 'PROVINCIAL', 'REGIONAL', 'NATIONAL', name='institutionlevel'), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('community_id', sa.Integer(), nullable=True),
    sa.Column('region_id', sa.Integer(), nullable=True),
    sa.Column('subregion_id', sa.Integer(), nullable=True),
    sa.Column('locality_id', sa.Integer(), nullable=True),
    sa.Column('contact_email', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.Column('phone', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('website', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.ForeignKeyConstraint(['community_id'], ['community.id'], ),
    sa.ForeignKeyConstraint(['locality_id'], ['locality.id'], ),
    sa.ForeignKeyConstraint(['parent_id'], ['institution.id'], ),
    sa.ForeignKeyConstraint(['region_id'], ['region.id'], ),
    sa.ForeignKeyConstraint(['subregion_id'], ['subregion.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_institution_level'), 'institution', ['level'], unique=False)
    op.create_index(op.f('ix_institution_name'), 'institution', ['name'], unique=False)
    op.create_table('issue',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=5000), nullable=False),
    sa.Column('status', sa.Enum('OPEN', 'IN_REVIEW', 'IN_PROGRESS', 'RESOLVED', 'CLOSED', 'REJECTED', name='issuestatus'), nullable=False),
    sa.Column('location_description', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(length=250), nullable=False),
    sa.Column('support_count', sa.Integer(), nullable=False),
    sa.Column('community_id', sa.Integer(), nullable=True),
    sa.Column('region_id', sa.Integer(), nullable=True),
    sa.Column('subregion_id', sa.Integer(), nullable=True),
    sa.Column('locality_id', sa.Integer(), nullable=True),
    sa.Column('creator_id', sa.Integer(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.Column('institution_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['issuecategory.id'], ),
    sa.ForeignKeyConstraint(['community_id'], ['community.id'], ),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['institution_id'], ['institution.id'], ),
    sa.ForeignKeyConstraint(['locality_id'], ['locality.id'], ),
    sa.ForeignKeyConstraint(['region_id'], ['region.id'], ),
    sa.ForeignKeyConstraint(['subregion_id'], ['subregion.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_issue_slug'), 'issue', ['slug'], unique=True)
    op.create_index(op.f('ix_issue_status'), 'issue', ['status'], unique=False)
    op.create_index(op.f('ix_issue_title'), 'issue', ['title'], unique=False)
    op.create_table('issuecomment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('issue_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['issue_id'], ['issue.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('issueimage',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('issue_id', sa.Integer(), nullable=False),
    sa.Column('url', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['issue_id'], ['issue.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('issuesupport',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('issue_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['issue_id'], ['issue.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('issueupdate',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('issue_id', sa.Integer(), nullable=False),
    sa.Column('institution_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=False),
    sa.Column('new_status', sa.Enum('OPEN', 'IN_REVIEW', 'IN_PROGRESS', 'RESOLVED', 'CLOSED', 'REJECTED', name='issuestatus'), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['institution_id'], ['institution.id'], ),
    sa.ForeignKeyConstraint(['issue_id'], ['issue.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('issueupdate')
    op.drop_table('issuesupport')
    op.drop_table('issueimage')
    op.drop_table('issuecomment')
    op.drop_index(op.f('ix_issue_title'), table_name='issue')
    op.drop_index(op.f('ix_issue_status'), table_name='issue')
    op.drop_index(op.f('ix_issue_slug'), table_name='issue')
    op.drop_table('issue')
    op.drop_index(op.f('ix_institution_name'), table_name='institution')
    op.drop_index(op.f('ix_institution_level'), table_name='institution')
    op.drop_table('institution')
    op.drop_index(op.f('ix_locality_name'), table_name='locality')
    op.drop_table('locality')
    op.drop_index(op.f('ix_subregion_name'), table_name='subregion')
    op.drop_table('subregion')
    op.drop_table('opinionvote')
    op.drop_table('region')
    op.drop_table('projectresource')
    op.drop_table('pollvote')
    op.drop_table('pollcustomresponse')
    op.drop_table('opinion')
    op.drop_table('projectstep')
    op.drop_table('projectdonation')
    op.drop_table('projectcommunitylink')
    op.drop_table('projectcommitment')
    op.drop_table('polltaglink')
    op.drop_table('pollreaction')
    op.drop_table('polloption')
    op.drop_table('pollcommunitylink')
    op.drop_table('pollcomment')
    op.drop_table('pointofview')
    op.drop_table('debatetaglink')
    op.drop_table('debatecommunitylink')
    op.drop_table('debatechangelog')
    op.drop_index(op.f('ix_country_name'), table_name='country')
    op.drop_table('country')
    op.drop_table('userfollowlink')
    op.drop_table('usercommunitylink')
    op.drop_table('sessions')
    op.drop_index(op.f('ix_project_title'), table_name='project')
    op.drop_index(op.f('ix_project_slug'), table_name='project')
    op.drop_table('project')
    op.drop_index(op.f('ix_poll_title'), table_name='poll')
    op.drop_index(op.f('ix_poll_slug'), table_name='poll')
    op.drop_table('poll')
    op.drop_index(op.f('ix_debate_title'), table_name='debate')
    op.drop_index(op.f('ix_debate_slug'), table_name='debate')
    op.drop_index(op.f('ix_debate_created_at'), table_name='debate')
    op.drop_table('debate')
    op.drop_index(op.f('ix_continent_name'), table_name='continent')
    op.drop_table('continent')
    op.drop_table('accounts')
    op.drop_table('verification_token')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_tag_name'), table_name='tag')
    op.drop_table('tag')
    op.drop_index(op.f('ix_issuecategory_name'), table_name='issuecategory')
    op.drop_table('issuecategory')
    op.drop_table('community')
    # ### end Alembic commands ###
